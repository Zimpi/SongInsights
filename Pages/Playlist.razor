@page "/playlist/{playlistId}"
@using SpotifyAPI.Web
@using System.Reflection.Metadata.Ecma335
@inject SpotifyClient Spotify
@inject IJSRuntime JsRuntime

@if (FullPlaylist != null)
{
    <MudGrid Justify="Justify.FlexStart">
        <MudItem xs="2">
            <MudImage Fluid="true" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center" Src="@FullPlaylist.Images?.FirstOrDefault()?.Url" Alt="Playlist Bild" />
        </MudItem>
        <MudItem xs="10">
            <MudStack Style="height: 100%" Justify="Justify.Center" AlignItems="AlignItems.Start">
                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="OpenPlaylist" />
                <MudText Typo="Typo.h2">@FullPlaylist.Name</MudText>
            </MudStack>
        </MudItem>
    </MudGrid>

    <MudTable Items="@AllTracks.OrderByDescending(s => s.AddedAt)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(FullPlaylist==null)" LoadingProgressColor="Color.Primary">
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>Preview</MudTh>
            <MudTh>Track</MudTh>
            <MudTh>Künstler</MudTh>
            <MudTh>Hinzugefügt am</MudTh>
            <MudTh>Hinzugefügt von</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Button"><MudIconButton Icon="@Icons.Material.Filled.Info" Href="@GetInfoLink(context.Track)" /></MudTd>
            <MudTd DataLabel="Preview">
                @if (context.Track is FullTrack { PreviewUrl: not null } track)
                {
                    <audio id="audio_with_controls"  controls src="@track.PreviewUrl" type="audio/mp3"></audio>
                }
            </MudTd>
            <MudTd DataLabel="Track">@(((FullTrack)context.Track).Name)</MudTd>
                <MudTd DataLabel="Künstler">@GetSongArtists(context.Track)</MudTd>
                <MudTd DataLabel="Sign">@context.AddedAt?.ToShortDateString()</MudTd>
                <MudTd DataLabel="Name">@context.AddedBy.DisplayName</MudTd>
            </RowTemplate>
        </MudTable>

}
else
{
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudStack>
}


@code
{
    [Parameter]
    public string PlaylistId { get; set; }

    public FullPlaylist FullPlaylist { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FullPlaylist = await Spotify.Playlists.Get(PlaylistId);
        var items = await Spotify.Playlists.GetItems(FullPlaylist.Id);
        AllTracks = (List<PlaylistTrack<IPlayableItem>>)await Spotify.PaginateAll(items);
        
        await InvokeAsync(StateHasChanged);
    }

    public List<PlaylistTrack<IPlayableItem>> AllTracks { get; set; }

    private string GetSongArtists(IPlayableItem track)
    {
        var fullTrack = track as FullTrack;
        return string.Join(", ", fullTrack.Artists.Select(a => a.Name));
    }

    private string GetInfoLink(IPlayableItem track)
    {
        var fullTrack = track as FullTrack;
        return $"/songs/{fullTrack.Id}";
    }

    private async Task OpenPlaylist()
    {
        string url = FullPlaylist.Uri;
        await JsRuntime.InvokeAsync<object>("open", url);
    }
}
